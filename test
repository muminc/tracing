private static HttpUriRequestBase createRdlRequest(RequestConfig config) {
        final HttpPost request = new HttpPost("http://localhost/Reports/api/v2.0/catalogitems");
        request.setConfig(config);


        String json= """
                {
                  "Name": "helloworld",
                  "ContentType": "application/rdl",
                  "Content": "@content",
                  "Path": "/First/helloworld",
                  "@odata.type": "#Model.Report"
                }
                """;

        String encodedString = getEncodedString();

        json = json.replace("@content", encodedString);

        final StringEntity entity = new StringEntity(json);

        request.setHeader("Content-Type","application/json");
        request.setEntity(entity);
        return request;
    }

rivate static HttpUriRequestBase listExistingRequest(RequestConfig config) {
        final HttpGet request = new HttpGet("http://localhost/Reports/api/v2.0/catalogitems");
        request.setConfig(config);


        String json= """
                {
                  "Name": "helloworld",
                  "ContentType": "application/rdl",
                  "Content": "@content",
                  "Path": "/First",
                  "@odata.type": "#Model.Report"
                }
                """;

        String encodedString = getEncodedString();

        json = json.replace("@content", encodedString);

        final StringEntity entity = new StringEntity(json);

        request.setHeader("Content-Type","application/json");
        request.setEntity(entity);
        return request;
    }



 public static String getEncodedString() {
        try {

            InputStream is = LoadXML.class.getResourceAsStream("/helloworld.rdl");

            DocumentBuilderFactory dFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(is);


            String referredDataSourceName = extractReferredDataSourceName(doc);

            XPath xpath2 = XPathFactory.newInstance().newXPath();
            XPathExpression dataSourceExpression = xpath2.compile("Report/DataSources/DataSource");
            NodeList dataSourcesNodeList = (NodeList) dataSourceExpression.evaluate(doc, XPathConstants.NODESET);

            Node dataSourceNode = dataSourcesNodeList.item(0);
            Node dataSourcesNode = dataSourceNode.getParentNode();
            dataSourcesNode.removeChild(dataSourceNode);
            dataSourcesNode.setTextContent(null);


            Element dataSourceElement = createDataSourceElement(doc, referredDataSourceName, "MyDataSourceReference");

            dataSourcesNode.appendChild(dataSourceElement);


            StringWriter sw = new StringWriter();
            TransformerFactory tf = TransformerFactory.newInstance();
            Transformer transformer = tf.newTransformer();
            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no");
            transformer.setOutputProperty(OutputKeys.METHOD, "xml");
            transformer.setOutputProperty(OutputKeys.INDENT, "no");
            transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");

            transformer.transform(new DOMSource(doc), new StreamResult(sw));
            String s = sw.toString();
            System.out.println(s);

            String encodedString = Base64.getEncoder().encodeToString(s.getBytes());
            System.out.println("encodedString = " + encodedString);
            return encodedString;



        } catch (Exception ex) {
            throw new RuntimeException("Error converting to String", ex);
        }
    }

    private static String extractReferredDataSourceName(Document doc) throws XPathExpressionException {
        XPath xpath = XPathFactory.newInstance().newXPath();
        XPathExpression dataSetDataSourceName = xpath.compile("Report/DataSets/DataSet/Query/DataSourceName");
        NodeList dataExprNodeList = (NodeList) dataSetDataSourceName.evaluate(doc, XPathConstants.NODESET);
        String referredDataSourceName = dataExprNodeList.item(0).getTextContent();
        return referredDataSourceName;
    }

    private static Element createDataSourceElement(Document doc, String referredDataSourceName, String dataSourceRefence) {
        Element dataSourceElement = doc.createElement("DataSource");
        dataSourceElement.setAttribute("Name", referredDataSourceName);

        Element dataSourceReference = doc.createElement("DataSourceReference");
        dataSourceReference.setTextContent(dataSourceRefence);
        dataSourceElement.appendChild(dataSourceReference);

        Element securityTypeElement = doc.createElement("rd:SecurityType");
        securityTypeElement.setTextContent("None");
        dataSourceElement.appendChild(securityTypeElement);

        Element datasourceIdType = doc.createElement("rd:DataSourceID");
        datasourceIdType.setTextContent(UUID.randomUUID().toString());
        dataSourceElement.appendChild(datasourceIdType);
        return dataSourceElement;
    }
